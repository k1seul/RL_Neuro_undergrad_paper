from collections import deque 
import numpy as np 
import sys , os 
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from MonkeyPath import MonkeyPath


class ExploreExploitPercentages():
    def __init__(self): 
        self.past_path = deque(maxlen=10) 
        self.choice_dict_backbone = {"right": 0 , "down" : 0, "left" : 0, "up" : 0} 
        self._action_to_direction = {
            0: np.array([1, 0]),
            1: np.array([0, 1]),
            2: np.array([-1, 0]),
            3: np.array([0, -1]),
        }
        self.direction_to_action = {
            (1, 0) : "right",
            (0, 1) : "down",
            (-1, 0) : "left",
            (0, -1) : "up"
        }
        self.road_map = np.array(
            
                [2, 0],
                [4, 0],
                [8, 0],
                [2, 1],
                [4, 1],
                [8, 1],
                [0, 2],
                [1, 2],
                [2, 2],
                [3, 2],
                [4, 2],
                [5, 2],
                [6, 2],
                [7, 2],
                [8, 2],
                [2, 3],
                [4, 3],
                [6, 3],
                [8, 3],
                [2, 4],
                [3, 4],
                [4, 4],
                [5, 4],
                [6, 4],
                [7, 4],
                [8, 4],
                [9, 4],
                [10, 4],
                [2, 5],
                [4, 5],
                [6, 5],
                [8, 5],
                [0, 6],
                [1, 6],
                [2, 6],
                [3, 6],
                [4, 6],
                [5, 6],
                [6, 6],
                [7, 6],
                [8, 6],
                [4, 7],
                [6, 7],
                [8, 7],
                [2, 8],
                [3, 8],
                [4, 8],
                [5, 8],
                [6, 8],
                [8, 8],
                [6, 9],
                [6, 10],
            
        )

    def reset_percentage_dict(self):
        self.choice_dict = {} 
        for node in self.road_map:
            self.choice_dict[tuple(node)] = self.choice_dict_backbone.copy()
            

    def update_path(self, path):
        self.past_path.append(path) 
    def past_path_to_counter(self): 
        if len(self.past_path) == 0:
            return
        for path in self.past_path:
            for node_num, node in enumerate(path):
                next_node = path[node_num + 1] if node_num < len(path) - 1 else None
                if next_node is None:
                    continue
                movement = np.int64(next_node) - np.int64(node)
                direction = self.direction_to_action[tuple(movement)]
                self.choice_dict[tuple(node)][direction] += 1

        for node in self.choice_dict: 
            total = sum(self.choice_dict[node].values())
            if total == 0:
                continue

            for direction in self.choice_dict[node]:
                self.choice_dict[node][direction] = self.choice_dict[node][direction] / total

        

if __name__ == "__main__":
    monkey_path = MonkeyPath() 
    exploreexploitpercentage = ExploreExploitPercentages() 
    exploreexploitpercentage.reset_percentage_dict()
    for i in range(10):
        
        exploreexploitpercentage.update_path(monkey_path.get_trial(i))

    exploreexploitpercentage.past_path_to_counter()
    
    print(exploreexploitpercentage.choice_dict)

